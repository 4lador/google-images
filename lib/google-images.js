// generated by coffee-script 1.9.2

var fs, generateInfo, request;

request = require('request');

fs = require('fs');

generateInfo = function(item) {
  var info;
  info = {
    height: item.image.height,
    width: item.image.width,
    url: item.link,
    byteSize: item.image.byteSize,
    thumbnailLink: item.image.thumbnailLink,
    thumbnailHeight: item.image.thumbnailHeight,
    thumbnailWidth: item.image.thumbnailWidth,
    writeTo: function(path, callback) {
      var stream;
      stream = fs.createWriteStream(path);
      stream.on('close', function() {
        return typeof callback === "function" ? callback() : void 0;
      });
      return request(item.url).pipe(stream);
    }
  };
  return info;
};

exports.search = function(query, options) {
  var callback, requestUrl;
  requestUrl = "https://www.googleapis.com/customsearch/v1?q=" + (encodeURIComponent(query.replace(/\s/g, '+'))) + "&searchType=image&cx=" + options.cse_id + "&key=" + options.cse_api_key;
  if (options.page) {
    requestUrl = requestUrl + ("&start=" + options.page);
  }
  if (options.size) {
    requestUrl = requestUrl + ("&imgSize=" + options.size);
  }
  if (typeof query === 'object') {
    options = query;
    query = options["for"];
    if (options.callback != null) {
      callback = options.callback;
    }
  }
  if (typeof query === 'string' && typeof options === 'function') {
    callback = options;
    options = {};
  }
  if (typeof query === 'string' && typeof options === 'object') {
    if (options.callback != null) {
      callback = options.callback;
    }
  }
  return request(requestUrl, function(err, res, body) {
    var data, error, i, images, item, items, len;
    try {
      data = JSON.parse(body);
    } catch (_error) {
      error = _error;
      if (callback) {
        callback(false, []);
      }
      return;
    }
    if (!data.items) {
      if (callback) {
        callback(false, []);
      }
      return;
    }
    items = data.items;
    images = [];
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      images.push(generateInfo(item));
    }
    if (callback) {
      return callback(false, images);
    }
  });
};
